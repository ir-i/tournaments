# Generated by Django 4.0.5 on 2022-08-05 15:37

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('homm', '0006_map'),
        ('users', '0002_alter_customuser_email'),
    ]

    operations = [
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_ru', models.CharField(max_length=512)),
                ('shortname_ru', models.CharField(max_length=128)),
                ('name_en', models.CharField(max_length=512)),
                ('shortname_en', models.CharField(max_length=128)),
                ('year', models.IntegerField(validators=[django.core.validators.MinValueValidator(2000), django.core.validators.MaxValueValidator(2100)])),
                ('is_official', models.BooleanField(default=True, verbose_name='Официальный турнир')),
                ('is_private', models.BooleanField(default=False, help_text='На этот турнир нет открытой регистрации.', verbose_name='Закрытый турнир')),
                ('forum_thread', models.CharField(help_text='Ссылка на тему турнира на форуме.', max_length=51, verbose_name='Тема турнира')),
                ('registration_is_opened', models.BooleanField(default=False, verbose_name='Регистрация открыта')),
                ('has_started', models.BooleanField(default=False, verbose_name='Турнир стартовал')),
                ('is_closed', models.BooleanField(default=False, verbose_name='Турнир завершен')),
                ('maps', models.ManyToManyField(to='homm.map')),
            ],
        ),
        migrations.CreateModel(
            name='TournamentPlayer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime_registered', models.DateTimeField(auto_now_add=True, verbose_name='Дата регистрации на турнир')),
                ('time_available', models.TextField(max_length=2048, verbose_name='Возможное время игры')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='reports.tournament')),
            ],
            options={
                'db_table': 'reports_tournament_players',
            },
        ),
        migrations.AddField(
            model_name='tournament',
            name='players',
            field=models.ManyToManyField(blank=True, through='reports.TournamentPlayer', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime_created', models.DateTimeField(auto_now_add=True, verbose_name='Дата начала отчета')),
                ('techresult', models.SmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2)])),
                ('is_commited', models.BooleanField(default=False)),
                ('is_confirmed', models.BooleanField(null=True)),
                ('datetime_commited', models.DateTimeField(null=True, verbose_name='Дата завершения отчета')),
                ('datetime_confirmed', models.DateTimeField(null=True, verbose_name='Дата подтверждения/отклонения отчета')),
                ('player1_comment', models.TextField(blank=True, max_length=5000)),
                ('player2_comment', models.TextField(blank=True, max_length=5000)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('player1', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='player1_set', to='reports.tournamentplayer')),
                ('player2', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='player2_set', to='reports.tournamentplayer')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='reports.tournament')),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(auto_now_add=True, verbose_name='Дата добавления игры')),
                ('winner', models.SmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(2)])),
                ('faction1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='faction1_set', to='homm.faction')),
                ('faction2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='faction2_set', to='homm.faction')),
                ('hero1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='hero1_set', to='homm.hero')),
                ('hero2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='hero2_set', to='homm.hero')),
                ('map', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='homm.map')),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reports.report')),
            ],
        ),
        migrations.AddConstraint(
            model_name='tournamentplayer',
            constraint=models.UniqueConstraint(fields=('tournament', 'player'), name='unique_tournament_player'),
        ),
    ]
